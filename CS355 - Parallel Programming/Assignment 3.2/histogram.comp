/* Start Header *****************************************************************/ 
/*! \file   histogram.comp
    \author Diren D Bharwani, diren.dbharwani, 390002520 
    \par    diren.dbharwani@digipen.edu
    \date   Nov 8, 2022 
    \brief  Copyright (C) 2022 DigiPen Institute of Technology.
            Reproduction or disclosure of this file or its contents without the
            prior written consent of DigiPen Institute of Technology is prohibited.
*/ 
/* End Header *******************************************************************/

#version 450

/* Constants *******************************************************************/

const vec3 RtoY = vec3(0.299, 0.587, 0.114);

/*******************************************************************************/

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (std430, binding = 2) buffer HistoBuffer
{
  uint bin[256];
  float cdf[256];
} histogram;

shared uint sharedBin[256];

void main()
{
  // Initialise all values to 0
  histogram.cdf[gl_LocalInvocationIndex] = 0.0;
  sharedBin[gl_LocalInvocationIndex] = 0;
  
  memoryBarrierShared();
  barrier();

  // Compute only the y component
  vec3 texelColour = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)).rgb * 255.0;
  float y = clamp(dot(RtoY, texelColour), 0.0f, 255.0f);
  
  // We add to the shared bin per block before adding to the global bin
  atomicAdd(sharedBin[uint(y)], 1);

  memoryBarrierShared();
  barrier();

  // Add to global bin
  atomicAdd(histogram.bin[gl_LocalInvocationIndex], sharedBin[gl_LocalInvocationIndex]);

  memoryBarrierShared();
  barrier();
}