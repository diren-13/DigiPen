/************************************************************************************//*!
\file           glpbo.h
\author         Diren D Bharwani, diren.dbharwani, 390002520
\par            email: diren.dbharwani\@digipen.edu
\date           July 6, 2021
\brief          This file contains the declaration of structure GLPbo that encapsulates 
                the functionality required to stream images generated by a 3D graphics 
                pipe emulator executed on the CPU for display by the GPU.

Copyright (C) 2021 DigiPen Institute of Technology.
Reproduction or disclosure of this file or its contents without the prior written consent
of DigiPen Institute of Technology is prohibited.
*//*************************************************************************************/

#pragma once

#include <GL/glew.h> // for access to OpenGL API declarations 
#include <glslshader.h> // GLSLShader class definition


/********************************************************************************//*!
@brief    Encapsulates 3D graphics pipe emulator which will write an image composed
          of RGBA values to PBO, copy the image from PBO to image store of a texture
          object, and use this texture image to render a quad the size of the window
          that will display the emulator's output.
*//*********************************************************************************/
struct GLPbo
{
    union Color;    // Forward declaration for color

    /*---------------------------------------------------------------------------------*/
    /* Member Variables                                                                */
    /*---------------------------------------------------------------------------------*/
    static GLsizei  width;
    static GLsizei  height;
    static GLsizei  pixelCount;
    static GLsizei  byteCount;    

    static Color*   pPBO;            // Ptr to PBO - set every frame with the value returned by glMapNamedBuffer()
    static Color    clearColour;

    // geometry and material information
    static GLuint       VAO;    
    static GLuint       VBO;
    static GLuint       EBO;
    static GLuint       texObj;         // id for texture object
    static GLuint       PBO;            // id for PBO
    static GLuint       elementCount;   // number of indices in EBO
    static GLSLShader   shaderProgram;
  
    /*-----------------------------------------------------------------------------*/
    /* Member Functions                                                            */
    /*-----------------------------------------------------------------------------*/

    /****************************************************************************//*!
    @brief    This is where the emulator does its work of emulating the graphics pipe
              where it generates images using set_pixel to write to the PBO.
    *//*****************************************************************************/
    static void emulate();

    /****************************************************************************//*!
    @brief    Render quad using the texture image generated by emulate()
    *//*****************************************************************************/
    static void setup_quad_vao();

    /****************************************************************************//*!
    @brief    Render quad using the texture image generated by emulate()
    *//*****************************************************************************/
    static void setup_shdrpgm();
  
    /****************************************************************************//*!
    @brief    Function akin to glClearcolor that set GLPbo::clear_clr.
    *//*****************************************************************************/
    static void set_clear_color(GLPbo::Color colour);
    static void set_clear_color(GLubyte r, GLubyte g, GLubyte b, GLubyte a = 255);

    /****************************************************************************//*!
    @brief    Function akin to glClear(GL_COLOR_BUFFER_BIT) - uses the pointer
    *//*****************************************************************************/
    static void clear_color_buffer();

    /*-----------------------------------------------------------------------------*/
    /* Lifecycle Functions                                                         */
    /*-----------------------------------------------------------------------------*/
    static void init(GLsizei w, GLsizei h);
    static void draw_fullwindow_quad();
    static void cleanup();

    union Color
    {
        struct
        {
            GLubyte r;
            GLubyte g;
            GLubyte b;
            GLubyte a;
        };

        GLubyte     val[4];     // treat <r,g,b,a> as array of 8-bit unsigned values
        GLuint      raw;        // treat <r,g,b,a> as 32-bit unsigned value

        /****************************************************************************//*!
        @brief    Default Constructor for Color.

        @param[in]  _r
            The red channel. Defaults to 0.
        @param[in]  _g
            The green channel. Defaults to 0.
        @param[in]  _b
            The blue channel. Defaults to 0.
        @param[in]  _a
            The alpha value. Defaults to 255.
        *//*****************************************************************************/
        Color(GLubyte _r = 0, GLubyte _g = 0, GLubyte _b = 0, GLubyte _a = 255);
    };

};