/************************************************************************************//*!
\file           glpbo.h
\author         Diren D Bharwani, diren.dbharwani, 390002520
\par            email: diren.dbharwani\@digipen.edu
\date           July 6, 2021
\brief          This file contains the declaration of structure GLPbo that encapsulates 
                the functionality required to stream images generated by a 3D graphics 
                pipe emulator executed on the CPU for display by the GPU.

Copyright (C) 2021 DigiPen Institute of Technology.
Reproduction or disclosure of this file or its contents without the prior written consent
of DigiPen Institute of Technology is prohibited.
*//*************************************************************************************/

#pragma once

#include <GL/glew.h>        // for access to OpenGL API declarations 
#include <glslshader.h>     // GLSLShader class definition

#include <model.h>
#include <texture.h>
#include <rasteriser.h>
#include <light.h>          // PointLight
#include <utility.h>


/********************************************************************************//*!
@brief    Encapsulates 3D graphics pipe emulator which will write an image composed
          of RGBA values to PBO, copy the image from PBO to image store of a texture
          object, and use this texture image to render a quad the size of the window
          that will display the emulator's output.
*//*********************************************************************************/
class GLPbo
{
  private:
    /*----------------------------------------------------------------------------------*/
    /* Member Variables                                                                */
    /*---------------------------------------------------------------------------------*/
    static GLsizei      width;
    static GLsizei      height;
    static GLsizei      pixelCount;
    static GLsizei      pixelBufferSize;

    static Colour*      pPBO;                   // Set every frame
    static double*      depthBuffer;            // Set every frames
    static Colour       clearColour;

    // geometry and material information
    static GLuint       PBO;                    // Pixel Buffer Object
    static GLuint       bufferTexObj;
    static GLSLShader   bufferShaderProgram;    // Shader program for the PBO

    // transformation matrices
    static glm::mat4    viewTransform;
    static glm::mat4    orthographicProjection;
    static glm::mat4    viewportTransform;
    static glm::mat4    concatViewOrthoViewportTransform;

    // Container of models
    static Model                backgroundQuad;
    static std::vector<Model>   models;
  
  private:
    /*-----------------------------------------------------------------------------*/
    /* Member Functions                                                            */
    /*-----------------------------------------------------------------------------*/

    /****************************************************************************//*!
    @brief    Sets up a PBO to emulate the behaviour of a rasteriser.
    *//*****************************************************************************/
    static void SetupPBO();

    /****************************************************************************//*!
    @brief    Sets up a shader program for the PBO to render the background.
    *//*****************************************************************************/
    static void SetupPBOShader();

    /****************************************************************************//*!
    @brief    Sets up matrices to be used in the scene.
    *//*****************************************************************************/
    static void SetupMatrices();

    /****************************************************************************//*!
    @brief    Sets all the values in the PBO to clearColour.
    *//*****************************************************************************/
    static void ClearColourBuffer();

    /****************************************************************************//*!
    @brief      Sets all the values in the DBVO to a specified value.

    @param[in]  value
        The value for all pixel depth values at the start of the frame.
    *//*****************************************************************************/
    static void ClearDepthBuffer(double value);

    /****************************************************************************//*!
    @brief    Function to transform a model's coordinates to the 
              viewport coordinates.

    @param[in]  model
        The model which data to use to transform the vertex data from NDC to viewport
        coordinates.
    *//*****************************************************************************/
    static void ViewportTransform(Model& model);
  
    /****************************************************************************//*!
    @brief      Function to rasterise a model based on the current render mode.
                Specific to this assignment.

    @param[in]  model
        The model to be rendered
    @param[in]  texture
        The texture to use on the model
    @param[in]  lightSource
        The point light source being applied to the model.
    @param[in]  renderMode
        The rendering mode of the model. 7 are available, being:
        Wireframe, Shadow Map, Faceted Shading, Smooth Shading, Textured,
        Textured with Faceted Shading and Textued with Smooth Shading.
    *//*****************************************************************************/
    static void RenderModel(Model& model, Texture& texture, PointLight& ightSource, const int& renderMode);

  public:
    /*-----------------------------------------------------------------------------*/
    /* Setter/Getter Functions                                                     */
    /*-----------------------------------------------------------------------------*/
    static void     SetClearColour  (Colour colour);
    static void     SetPixel        (GLint x, GLint y, Colour colour);
    static void     SetDepth        (GLint x, GLint y, double depth);
    static double   GetDepth        (GLint x, GLint y);

    inline static GLint  GetWidth() { return width; }
    inline static GLint  GetHeight() { return height; }

    /*-----------------------------------------------------------------------------*/
    /* Member Functions                                                            */
    /*-----------------------------------------------------------------------------*/

    /****************************************************************************//*!
    @brief    This is where the emulator does its work of emulating the graphics pipe
              where it generates images using set_pixel to write to the PBO.
    *//*****************************************************************************/
    static void emulate();
    
    /****************************************************************************//*!
    @brief    Function to set the title bar
    *//*****************************************************************************/
    static void SetTitleBar();

    /*-----------------------------------------------------------------------------*/
    /* Lifecycle Functions                                                         */
    /*-----------------------------------------------------------------------------*/
    static void init(GLsizei w, GLsizei h);
    static void draw_fullwindow_quad();
    static void cleanup();
};