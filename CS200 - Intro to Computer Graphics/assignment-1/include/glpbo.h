/************************************************************************************//*!
\file           glpbo.h
\author         Diren D Bharwani, diren.dbharwani, 390002520
\par            email: diren.dbharwani\@digipen.edu
\date           July 6, 2021
\brief          This file contains the declaration of structure GLPbo that encapsulates 
                the functionality required to stream images generated by a 3D graphics 
                pipe emulator executed on the CPU for display by the GPU.

Copyright (C) 2021 DigiPen Institute of Technology.
Reproduction or disclosure of this file or its contents without the prior written consent
of DigiPen Institute of Technology is prohibited.
*//*************************************************************************************/

#pragma once

#include <GL/glew.h>        // for access to OpenGL API declarations 
#include <glslshader.h>     // GLSLShader class definition

#include <glmodel.h>
#include <glutility.h>


/********************************************************************************//*!
@brief    Encapsulates 3D graphics pipe emulator which will write an image composed
          of RGBA values to PBO, copy the image from PBO to image store of a texture
          object, and use this texture image to render a quad the size of the window
          that will display the emulator's output.
*//*********************************************************************************/
class GLPbo
{
  public:
    /*---------------------------------------------------------------------------------*/
    /* Member Variables                                                                */
    /*---------------------------------------------------------------------------------*/
    static Controller   controller;

  private:
    /*----------------------------------------------------------------------------------*/
    /* Member Variables                                                                */
    /*---------------------------------------------------------------------------------*/
    static GLsizei      width;
    static GLsizei      height;
    static GLsizei      pixelCount;
    static GLsizei      byteCount;

    static Color*       pPBO;           // Set every frame
    static Color        clearColour;

    // geometry and material information
    static GLuint       PBO;
    static GLuint       bufferTexObj;
    static GLSLShader   bufferShaderProgram;    // Shader program for the PBO

    // Tracking variables
    static int          culledCount;

    // Model data
    static std::vector<GLModel> models;
  
  private:
    /*-----------------------------------------------------------------------------*/
    /* Setter Functions                                                            */
    /*-----------------------------------------------------------------------------*/
    inline static void SetClearColour(Color colour) 
    { 
        clearColour = colour; 
    }

    inline static void SetClearColour(GLubyte r, GLubyte g, GLubyte b, GLubyte a = 255) 
    { 
        SetClearColour({ r, g, b, a }); 
    }

    static void SetPixel(GLint x, GLint y, Color colour);

    /*-----------------------------------------------------------------------------*/
    /* Member Functions                                                            */
    /*-----------------------------------------------------------------------------*/

    /****************************************************************************//*!
    @brief    Render quad using the texture image generated by emulate()
    *//*****************************************************************************/
    static void SetupPBO();

    /****************************************************************************//*!
    @brief    Sets up a shader program for the PBO to render the background.
    *//*****************************************************************************/
    static void SetupPBOShader();

    /****************************************************************************//*!
    @brief    Sets up a scene.

    @param[in]  filename
        The path to the scene file.
    *//*****************************************************************************/
    static void SetupScene(const std::string& filename);

    /****************************************************************************//*!
    @brief    Function akin to glClear(GL_COLOR_BUFFER_BIT) - uses the pointer
    *//*****************************************************************************/
    static void ClearColourBuffer();

    /****************************************************************************//*!
    @brief    Function to transform a model's coordinates to the 
              viewport coordinates.

    @param[in]  model
        The model which data to use to transform the vertex data from NDC to viewport
        coordinates.
    *//*****************************************************************************/
    static void ViewportTransform(GLModel& model);

    /****************************************************************************//*!
    @brief    Function to rasterise a line using Bresenham's Algorithm.

    @param[in]  startPos
        The starting position of the line.
    @param[in]  endPos
        The ending position of the line.
    @param[in]  drawColour
        The colour of the line to be rendered.
    *//*****************************************************************************/
    static void RenderLine(const glm::vec2& startPos, const glm::vec2& endPos, const Color& drawColour);

    /****************************************************************************//*!
    @brief    Function to rasterise a wireframe triangle. 

              Checks if the triangle is front-faced (points passed in CCW) to render. 
              Culls back-faced triangles (CW).

    @param[in]  p0
        The first position of the triangle.
    @param[in]  p1
        The second position of the triangle.
    @param[in]  p2
        The last position of the triangle.
    @param[in]  drawColour
        The colour of the line to be rendered. Default is black.

    @returns  True if triangle is front faced. False if back faced.
    *//*****************************************************************************/
    static bool RenderWireframeTriangle(const glm::vec3& p0, const glm::vec3& p1, const glm::vec3& p2, const Color& colour = (0, 0, 0));

    /****************************************************************************//*!
    @brief    Function to rasterise a faceted triangle: the triangle will be filled 
              with the provided colour.
              
              Checks if the triangle is front-faced (points passed in CCW) to render.
              Culls back-faced triangles (CW).

    @param[in]  p0
        The first position of the triangle.
    @param[in]  p1
        The second position of the triangle.
    @param[in]  p2
        The last position of the triangle.
    @param[in]  drawColour
        The colour of the line to be rendered.

    @returns  True if triangle is front faced. False if back faced.
    *//*****************************************************************************/
    static bool RenderFacetedTriangle(const glm::vec3& p0, const glm::vec3& p1, const glm::vec3& p2, const Color& colour);

    /****************************************************************************//*!
    @brief    Function to rasterise a shaded triangle. Interpolates the colour across 
              the triangle using the normals.
    
              Checks if the triangle is front-faced (points passed in CCW) to render. 
              Culls back-faced triangles (CW).

    @param[in]  p0
        The first position of the triangle.
    @param[in]  p1
        The second position of the triangle.
    @param[in]  p2
        The last position of the triangle.
    @param[in]  c0
        The colour at p0 of the triangle.
    @param[in]  c1
        The colour at p1 of the triangle.
    @param[in]  c2
        The colour at p2 of the triangle.

    @returns  True if triangle is front faced. False if back faced.
    *//*****************************************************************************/
    static bool RenderShadedTriangle(const glm::vec3& p0, const glm::vec3& p1, const glm::vec3& p2, const glm::dvec3& c0, const glm::dvec3& c1, const glm::dvec3& c2);
  
    /****************************************************************************//*!
    @brief    Function to rasterise a model based on the current render mode.
              Specific to assignment 1.
    *//*****************************************************************************/
    static void RenderModel(GLModel& model, const int& renderMode);

  public:
    /*-----------------------------------------------------------------------------*/
    /* Member Functions                                                            */
    /*-----------------------------------------------------------------------------*/

    /****************************************************************************//*!
    @brief    This is where the emulator does its work of emulating the graphics pipe
              where it generates images using set_pixel to write to the PBO.
    *//*****************************************************************************/
    static void emulate();

    /****************************************************************************//*!
    @brief    Function to set the title bar
    *//*****************************************************************************/
    static void SetTitleBar();

    /*-----------------------------------------------------------------------------*/
    /* Lifecycle Functions                                                         */
    /*-----------------------------------------------------------------------------*/
    static void init(GLsizei w, GLsizei h);
    static void draw_fullwindow_quad();
    static void cleanup();
};